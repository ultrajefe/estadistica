

################################################################################################################
####### ejecución   ############################################################################################
################################################################################################################


base<-read.csv('//192.168.1.27/Bancodedatos/listas nominales/2014/Septiembre/LN 29sep2014.csv')

base<-base[base$edo==9,]


muestras.vivienda(casos=2000,
                  base=base,
                  casos.estrato=NULL,
                  niveles=c("estado","municipio"),
                  upm="secc",
                  tamano="ln",
                  factor.p=1,
                  factor.e=1,
                  epu=10,
                  resto="simple",
                  muestreo="PPTautoestratificado"
                  )






##########################################################################################################
###########   función   ##################################################################################
##########################################################################################################

muestras.vivienda<-function(casos,
                            base,
                            casos.estrato=NULL,
                            niveles,
                            upm,
                            tamano,
                            factor.p,
                            factor.e,
                            epu,
                            resto,
                            muestreo){
  ##################################################################################
  ###########   preparo la base  ###################################################
  ##################################################################################
  
  
  #se crean los identificadores numéricos de las variables
  
  n.niveles<-match(niveles,names(base))
  n.upm<-match(upm,names(base))
  n.tamaño<-match(tamano,names(base))
  

  # se ordena la base tomando como criterio los niveles
  # se quitan los niveles sin elementos
	
	v<-NULL
	for(i in 1:length(n.niveles)){
		v[i]<-paste("base","[n.niveles[",i,"]","]",sep="")
	}
	v<-paste(v,collapse=",")
	
	eval(parse(text=paste(
		"base<-base[order(",v,",base[n.upm]),]"
		,sep="")))
	
	for(i in 1:length(n.niveles)){
		base[,n.niveles[i]]<-as.factor(base[,n.niveles[i]])
		base[,n.niveles[i]]<-droplevels(base[,n.niveles[i]])
	}
		
	base[,n.upm]<-as.factor(base[,n.upm])
	base[,n.upm]<-droplevels(base[,n.upm])
	
  
  
    #se crea el objeto de información, contiene los estratos finales (llamados identificador) y el número de casos asignados a cada estrato
    
    
  
    var.identificador<-''
    for (ii in 1:length(niveles)){
      var.identificador<-paste(var.identificador,'base$',niveles[ii],',',sep='')
  }
  base$identificador<-eval(parse(text=paste('factor(paste(',var.identificador,"sep='_'))",sep="")))
    n.identificador<-match('identificador',names(base))
  informacion<-data.frame(row.names =levels(base$identificador))
  informacion$tamaño<-tapply(base[,n.tamaño],base$identificador,sum)
  if (length(casos.estrato)==0){
    informacion$casos<-informacion$tamaño/sum(informacion$tamaño)*casos
  } else if (length(casos.estrato)==nrow(informacion)) {
    informacion$casos<-casos.estrato
  } else if (length(casos.estrato)==1) {
    cat('A cada estrato se le asignara el numero de casos: ',casos,'\n\n')
    informacion$casos<-casos.estrato
  } else {
    stop('LA ASIGNACION DE CASOS NO ES ADECUADA \n\n')
  }

  
  basemuestra<<-base
  informacion<<-informacion
  
}

